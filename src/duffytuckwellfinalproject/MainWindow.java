/*
 * Hugh Tuckwell & Samuel Duffy
 * 06/08/2022
 * The main window, houses the majority of the game's logic, and contins several methods and clauses to determine the outcome of a game. 
 * This class is also Where the game is played. The hit and stand user input buttons are responsible for 
 * 
 */
package duffytuckwellfinalproject;

//imports
import static duffytuckwellfinalproject.FirstWindow.icon;
import java.io.File;
import java.net.URL;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class MainWindow extends javax.swing.JFrame {

    //Variable declaration and instation for objects that will remain present for the rest of this windows runtime. 
    FirstWindow firstWindow;
    Player p;
    Deck deck;
    int playerTracker = 3;
    int dealerTracker = 2;
    Hand playerHand = new Hand();
    Hand dealerHand = new Hand();
    int bet = 0;
    char playerWin = 'n';

    //Imageicon instantiation code that resizes the background and button images
    ImageIcon bgl = new ImageIcon("src/duffytuckwellfinalproject/images/Backgrounds/BLJ.png");
    ImageIcon resizedBgl = new ImageIcon(bgl.getImage().getScaledInstance(800, 1050, java.awt.Image.SCALE_SMOOTH));

    ImageIcon bgllose = new ImageIcon("src/duffytuckwellfinalproject/images/Backgrounds/BLJlose.png");
    ImageIcon resizedBgllose = new ImageIcon(bgllose.getImage().getScaledInstance(800, 1050, java.awt.Image.SCALE_SMOOTH));

    ImageIcon bglwin = new ImageIcon("src/duffytuckwellfinalproject/images/Backgrounds/BLJwin.png");
    ImageIcon resizedBglwin = new ImageIcon(bglwin.getImage().getScaledInstance(800, 1050, java.awt.Image.SCALE_SMOOTH));
    
    ImageIcon hit = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Hit.png");
    ImageIcon stand = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Stand.png");
    ImageIcon resizedHit = new ImageIcon(hit.getImage().getScaledInstance(125, 125, java.awt.Image.SCALE_SMOOTH));
    ImageIcon resizedStand = new ImageIcon(stand.getImage().getScaledInstance(125, 125, java.awt.Image.SCALE_SMOOTH));

    ImageIcon playAgain = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/PlayAgain.png");
    ImageIcon quitGame = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/QuitGame.png");
    ImageIcon resizedPlayAgain = new ImageIcon(playAgain.getImage().getScaledInstance(120, 60, java.awt.Image.SCALE_SMOOTH));
    ImageIcon resizedQuitGame = new ImageIcon(quitGame.getImage().getScaledInstance(120, 60, java.awt.Image.SCALE_SMOOTH));

    /**
     * Main window constructor, sets the button and background icons accordingly
     * initially sets the buttons to false
     *
     * @param m the first window's JFrame object
     * @param p the Player object that the user signed into in the first window
     */
    public MainWindow(FirstWindow m, Player p) {
        initComponents();
        btnHit.setIcon(resizedHit);
        btnStand.setIcon(resizedStand);
        btnReplay.setIcon(resizedPlayAgain);
        btnQuit.setIcon(resizedQuitGame);
        lblBackground.setIcon(resizedBgl);

        firstWindow = m;

        btnReplay.setEnabled(false);
        btnQuit.setEnabled(false);

        this.p = p;
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnHit = new javax.swing.JButton();
        btnStand = new javax.swing.JButton();
        lblCard5 = new javax.swing.JLabel();
        lblCard4 = new javax.swing.JLabel();
        lblCard3 = new javax.swing.JLabel();
        lblCard2 = new javax.swing.JLabel();
        lblCard1 = new javax.swing.JLabel();
        lblDealer5 = new javax.swing.JLabel();
        lblDealer4 = new javax.swing.JLabel();
        lblDealer3 = new javax.swing.JLabel();
        lblDealer2 = new javax.swing.JLabel();
        lblDealer1 = new javax.swing.JLabel();
        btnReplay = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        tokenLabel = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(815, 1090));
        setPreferredSize(new java.awt.Dimension(815, 1090));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitActionPerformed(evt);
            }
        });
        getContentPane().add(btnHit, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 660, 120, 120));

        btnStand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStandActionPerformed(evt);
            }
        });
        getContentPane().add(btnStand, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 660, 130, 120));
        getContentPane().add(lblCard5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 860, -1, -1));
        getContentPane().add(lblCard4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 860, -1, -1));
        getContentPane().add(lblCard3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 860, -1, -1));
        getContentPane().add(lblCard2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 860, -1, -1));
        getContentPane().add(lblCard1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 860, -1, -1));
        getContentPane().add(lblDealer5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 510, -1, -1));
        getContentPane().add(lblDealer4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 510, -1, -1));
        getContentPane().add(lblDealer3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 510, -1, -1));
        getContentPane().add(lblDealer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 510, -1, -1));
        getContentPane().add(lblDealer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 510, -1, -1));

        btnReplay.setMinimumSize(new java.awt.Dimension(1700, 500));
        btnReplay.setPreferredSize(new java.awt.Dimension(1500, 500));
        btnReplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplayActionPerformed(evt);
            }
        });
        getContentPane().add(btnReplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(656, 10, 120, 60));

        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });
        getContentPane().add(btnQuit, new org.netbeans.lib.awtextra.AbsoluteConstraints(656, 80, 120, 60));

        tokenLabel.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        tokenLabel.setForeground(new java.awt.Color(255, 255, 255));
        tokenLabel.setText("Tokens: ");
        getContentPane().add(tokenLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 820, -1, -1));
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Code to be executed when the user presses the hit button
     *
     * @param evt
     */
    private void btnHitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitActionPerformed

        //play the sound of a card being flipped over
        playSound("hit", false);

        //run the hit method
        hit(playerHand);
    }//GEN-LAST:event_btnHitActionPerformed
    /**
     * Code to be executed when the user presses the stand button
     *
     * @param evt
     */
    private void btnStandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStandActionPerformed

        //disable the hit and stand buttons
        btnHit.setEnabled(false);
        btnStand.setEnabled(false);

        //hit the dealer 
        hit(dealerHand);

        //outputs the dealers current number 
        JOptionPane.showMessageDialog(null, "The dealer flipped over his card and it was a " + dealerHand.getCards().get(1).getNumber() + "!\nThis brings the dealer's total to " + findSum(dealerHand) + ".", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);

        //as long as the player has not won or lost, keep checking if they have won or lost 
        while (playerWin == 'n') {
            calculateResults();
        }

        //distribute tokens
        distributeTokens();

    }//GEN-LAST:event_btnStandActionPerformed

    /**
     * Code to be executed when the user presses the play again button
     *
     * @param evt
     */
    private void btnReplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplayActionPerformed

        //reset the table
        reset();
    }//GEN-LAST:event_btnReplayActionPerformed

    /**
     * Code to be executed when the user presses the quit button
     *
     * @param evt
     */
    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed

        //save the player object to the player's save file
        SaveFiles.saveObjectNoSelection(p);

        //make the first window visible, and the main winfow invisible
        firstWindow.setVisible(true);
        this.setVisible(false);

        //change the token label on the first page 
        firstWindow.lblTokens.setText("Tokens:" + firstWindow.signedInPlayer.getTokens());

        //do not allow the user to play again if they have 0 tokens
        if (firstWindow.signedInPlayer.tokens == 0) {
            firstWindow.btnPlay.setEnabled(false);
        }


    }//GEN-LAST:event_btnQuitActionPerformed

    /**
     * series of assignments to be executed when the game is reset
     */
    public void reset() {

        //clear dealer hand
        dealerHand.getCards().clear();
        playerHand.getCards().clear();

        //get a new, full, deck
        deck = new Deck();

        //resets the user and dealer's next card to 3 and 2 respectively. 
        //(i.e. the player has 2 cards dealed, so their next will be 3, dealer has 1 card dealed, so the next will be 2.)
        playerTracker = 3;
        dealerTracker = 2;

        //sets playewin to false 
        playerWin = 'n';

        //resets background and button icons 
        lblBackground.setIcon(resizedBgl);
        btnReplay.setEnabled(false);
        btnQuit.setEnabled(false);

        //enables the hit and stand buttons
        btnHit.setEnabled(true);
        btnStand.setEnabled(true);

        //resets the card icons 
        lblCard1.setIcon(null);
        lblCard2.setIcon(null);
        lblCard3.setIcon(null);
        lblCard4.setIcon(null);
        lblCard5.setIcon(null);
        lblDealer1.setIcon(null);
        lblDealer2.setIcon(null);
        lblDealer3.setIcon(null);
        lblDealer4.setIcon(null);
        lblDealer5.setIcon(null);

        //Resets the token counter label
        tokenLabel.setText("Tokens: " + p.getTokens());

        //takes user input for what the user wishes to bet
        getBet();

        //adjusts user's token based on the bet
        p.setTokens(p.getTokens() - bet);

        //picks a card from the deck and gives it to the player
        //also adds it to the players hand object 
        Card firstPlayerCard = deck.getRandomCard();
        lblCard1.setIcon(firstPlayerCard.getImage());
        playerHand.getCards().add(firstPlayerCard);

        //picks a card from the deck and gives it to the player
        //also adds it to the players hand object 
        Card secondPlayerCard = deck.getRandomCard();
        lblCard2.setIcon(secondPlayerCard.getImage());
        playerHand.getCards().add(secondPlayerCard);

        //picks a card from the deck and gives it to the dealer
        //also adds it to the dealers hand object 
        Card firstDealerCard = deck.getRandomCard();
        lblDealer1.setIcon(firstDealerCard.getImage());
        dealerHand.getCards().add(firstDealerCard);

        //sets the dealer's flipped over card to the back of a card
        lblDealer2.setIcon(new ImageIcon(new ImageIcon("src/duffytuckwellfinalproject/images/cards/1B.png").getImage().getScaledInstance(100, 150, java.awt.Image.SCALE_SMOOTH)));
    }

    /**
     * Method that takes user input and changes the bet value accordingly
     */
    public void getBet() {
        boolean goodInput = false;

        //while loop that runs until the user enters a valid value
        while (!goodInput) {
            try {

                //take user input
                bet = Integer.parseInt("" + JOptionPane.showInputDialog(null, "How much would you like to bet for Blackjack?\nYou have " + p.getTokens() + " tokens left.", "Hugh and Sam's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon, null, ""));

                //if the bet is more than 0 and less than the users total tokens
                if (bet <= p.getTokens() && bet > 0) {
                    goodInput = true;

                    // if not
                } else {
                    JOptionPane.showMessageDialog(null, "That's an invalid bet!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                }

                //catches error where the user doesnt enter a number value
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "That's not a number!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }

    }

    /**
     * Method that finds the sum of the users cards
     *
     * @param hand the user's hand object
     * @return the integer representing the sum of the cards
     */
    public int findSum(Hand hand) {

        //declares sum and current value
        int sum = 0;
        int currentCardValue;

        //loops through the users hand
        for (int i = 0; i < hand.getCards().size(); i++) {
            currentCardValue = hand.getCards().get(i).getNumber();

            //sets king, queen, jack, cards to 10
            if (currentCardValue > 10) {
                currentCardValue = 10;
            }

            //sets ace to 11
            if (currentCardValue == 1) {
                currentCardValue = 11;
            }
            sum = sum + currentCardValue;
        }

        //sets ace value to 1 if user is over 21
        if (sum > 21) {
            for (int j = 0; j < hand.getCards().size(); j++) {
                if (hand.getCards().get(j).getNumber() == 1) {
                    if (sum > 21) {
                        sum = sum - 10;

                    }
                }
            }

        }

        return sum;
    }

    /**
     * Code that runs when the user or dealer is hit
     *
     * @param hand the hand object of the user or dealer
     */
    public void hit(Hand hand) {

        //random card is generated 
        Card nextCard = deck.getRandomCard();

        //checks if the hand is the players hand
        if (hand.equals(playerHand)) {

            //checks which card is being dealt (3rd 4th or 5th), then adjusts the card icon and adds the card to the users hand class
            if (playerTracker == 3) {
                lblCard3.setIcon(nextCard.getImage());
                playerHand.getCards().add(nextCard);
            } else if (playerTracker == 4) {
                lblCard4.setIcon(nextCard.getImage());
                playerHand.getCards().add(nextCard);
            } else if (playerTracker == 5) {
                lblCard5.setIcon(nextCard.getImage());
                playerHand.getCards().add(nextCard);

                //if the user is dealt 5 cards without going over 21, they win
                if (findSum(playerHand) <= 21) {

                    //output win message, sets playerwin to true, distribute tokens
                    JOptionPane.showMessageDialog(null, "You got to 5 cards without going over 21, you win!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                    playerWin = 't';
                    distributeTokens();
                }

                //error where too many cards are drawn
            } else {
                JOptionPane.showMessageDialog(null, "Too many cards!");
            }

            //increment player card tracker by 1 
            playerTracker++;

            //if user has gone over 21
            if (findSum(playerHand) > 21) {

                //run the lose method with the appropriate message, set playerwin to false, distribute tokens
                lose("You went over 21!");
                playerWin = 'f';
                distributeTokens();

            }

            //if the dealer is the one being hit
        } else if (hand.equals(dealerHand)) {

            //checks which card is being dealt (2nd 3rd 4th or 5th), then adjusts the card icon and adds the card to the users hand class
            if (dealerTracker == 2) {
                lblDealer2.setIcon(nextCard.getImage());
                dealerHand.getCards().add(nextCard);
            } else if (dealerTracker == 3) {
                lblDealer3.setIcon(nextCard.getImage());
                dealerHand.getCards().add(nextCard);
            } else if (dealerTracker == 4) {
                lblDealer4.setIcon(nextCard.getImage());
                dealerHand.getCards().add(nextCard);
            } else if (dealerTracker == 5) {
                lblDealer5.setIcon(nextCard.getImage());
                dealerHand.getCards().add(nextCard);

                //if the user is dealt 5 cards without going over 21
                if (findSum(dealerHand) <= 21) {

                    //output that the dealer has won, playerwin set to falseW
                    JOptionPane.showMessageDialog(null, "The dealer got to 5 cards without going over 21, you lose!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                    playerWin = 'f';
                    distributeTokens();
                }

                //if the dealer went over 5 cards
            } else {
                JOptionPane.showMessageDialog(null, "Too many cards, Mr. Dealer!");
            }
            dealerTracker++;

        } else {
            JOptionPane.showMessageDialog(null, "Error! - Unknown Hand!");
        }

    }

    /**
     * Method that determines if the user has won, lost, or tied
     */
    public void calculateResults() {

        //if the dealer has not gone over 21
        if (findSum(dealerHand) < 21) {

            //if the dealer's sum is less than the players and less than 17
            if (((findSum(dealerHand)) < (findSum(playerHand))) && (findSum(dealerHand)) < 17) {

                //output that the dealer is hitting, then hit 
                JOptionPane.showMessageDialog(null, "The dealer has decided to hit on " + findSum(dealerHand), "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                hit(dealerHand);

            } else if ((findSum(dealerHand)) == (findSum(playerHand))) {

                //output that dealer and user are tied, then set playerwin to tie
                JOptionPane.showMessageDialog(null, "Push! Both are equal.", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                playerWin = 'p';

                //if the dealers hand is greater than the users
            } else if ((findSum(dealerHand)) > (findSum(playerHand))) {

                //output that the player lost, and set playerWin to false
                lose("Dealer's hand is greater than the players!");
                playerWin = 'f';

                //if the players hand is greater than the dealers
            } else if ((findSum(dealerHand)) < (findSum(playerHand))) {

                //output that the user has won, set playerWin to true
                win("Player's hand is greater than the dealers!");
                playerWin = 't';
            }

            //if the dealer's hand is greater or equal to 21
        } else {

            //if the dealers hand is equal to 21
            if (findSum(dealerHand) == 21) {

                //if the players hand is equal to 21
                if (findSum(playerHand) == 21) {

                    //output that the dealer and player tied, set playerWin to tie
                    JOptionPane.showMessageDialog(null, "Both the dealer and player got Blackjack! Push!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                    playerWin = 'p';

                    //if the dealers hand is 21 and the players is less than 21
                } else {

                    //output theat the user lost, set playerWin to false
                    lose("The dealer got Blackjack!");
                    playerWin = 'f';
                }

                //if the dealer has gone over 21
            } else {

                //output that the player has won, set playerWin to true
                win("Dealer has gone over 21!");
                playerWin = 't';
            }
        }
    }

    /**
     * Method used to distribute tokens to the user
     */
    public void distributeTokens() {

        //if the user won
        if (playerWin == 't') {

            //changes background accordingly
            lblBackground.setIcon(resizedBglwin);

            //increment the users tokens by twice the amount they bet
            int wonTokens = bet * 2;
            p.setTokens(p.getTokens() + wonTokens);

            //if user lost
        } else if (playerWin == 'f') {

            //change background accordingly
            lblBackground.setIcon(resizedBgllose);

            //if the user and dealer tied
        } else if (playerWin == 'p') {

            //gives the user their tokens back
            int wonTokens = bet;
            p.setTokens(p.getTokens() + wonTokens);

            //if user has somehow not won, lost, or tied
        } else {
            JOptionPane.showMessageDialog(null, "Null! - Something has gone seriously wrong!");
        }

        //adjusts token label
        tokenLabel.setText("Tokens: " + p.getTokens());

        //enable the quit button, disable the hit and stand button
        btnQuit.setEnabled(true);
        btnHit.setEnabled(false);
        btnStand.setEnabled(false);

        if (p.getTokens() <= 0) {//if the user has ran out of tokens

            //output message, do not allow player to play again
            JOptionPane.showMessageDialog(null, "No more tokens left! Game over!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            btnReplay.setEnabled(false);

            //if the user has not run out of tokens
        } else {

            //allow player to play again
            btnReplay.setEnabled(true);
        }

    }

    /**
     * Method that plays a file in the 'sound' folder
     *
     * @param s the name of the file
     * @param l boolean that determines whether the sound will loop
     */
    public static void playSound(String s, boolean l) {
        String path = "src/duffytuckwellfinalproject/sounds/" + s + ".wav"; //finds the path of the audio file
        try {

            //creates a file object with the given path
            File audioPath = new File(path);

            if (audioPath.exists()) {// if the file exists

                //create an audioinputstream object with the file
                //create, open, then play the audio clip
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(audioPath);
                Clip clip = AudioSystem.getClip();
                clip.open(audioInput);
                clip.start();

                //loop the audio clip
                if (l) {
                    clip.loop(Clip.LOOP_CONTINUOUSLY);
                }

                //if the file does not exist, let the user know
            } else {
                JOptionPane.showMessageDialog(null, "File not found");
            }

            //catches any errors 
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Method that is ran when the user loses
     *
     * @param message the message to be outputted
     */
    public void lose(String message) {

        //output the users lose message via JOptionPane, play lose sound
        JOptionPane.showMessageDialog(null, message + " You Lose!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
        playSound("lose", false);
    }

    /**
     * Method that is ran when the user wins
     *
     * @param message the message to be outputted
     */
    public void win(String message) {

        //output the users win message via JOptionPane, play win sound
        JOptionPane.showMessageDialog(null, message + " You Win!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
        playSound("win", false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHit;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnReplay;
    private javax.swing.JButton btnStand;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCard1;
    private javax.swing.JLabel lblCard2;
    private javax.swing.JLabel lblCard3;
    private javax.swing.JLabel lblCard4;
    private javax.swing.JLabel lblCard5;
    private javax.swing.JLabel lblDealer1;
    private javax.swing.JLabel lblDealer2;
    private javax.swing.JLabel lblDealer3;
    private javax.swing.JLabel lblDealer4;
    private javax.swing.JLabel lblDealer5;
    private javax.swing.JLabel tokenLabel;
    // End of variables declaration//GEN-END:variables
}
