package duffytuckwellfinalproject;

import java.io.File; // Import File to read and write from data files to save progess
import java.util.ArrayList; // Import ArrayList to hold all the players 
import javax.swing.ImageIcon; // Import ImageIcons for custom buttons and backgrounds
import javax.swing.JOptionPane; // Import JOptionPane to show messages and gather input from the user

/**
 *
 * @author hutuc9524
 */
public class FirstWindow extends javax.swing.JFrame {

    Player signedInPlayer; // Create a player object to representing the signed in player
    boolean signedIn = false; // Create a boolean to track if the user has signed in, it is false by default.
    private MainWindow otherWindow; // Create the two other window objects to move through
    private CreditsWindow creditsWindow; // Create the two other window objects to move through
    private static ArrayList<Player> playerList = new ArrayList(); // Create an arrayList, this will be full of players
    Player p; // Create a player object, this will represent the current player
    static ImageIcon JOptionPaneIcon = new ImageIcon("src/duffytuckwellfinalproject/images/JOptionPane/Casino.png");
    static ImageIcon icon = new ImageIcon(JOptionPaneIcon.getImage().getScaledInstance(100, 100, java.awt.Image.SCALE_SMOOTH));
    
    public FirstWindow() {
        initComponents();
        // A method to add all the button images, resize them, and add them to the buttons on the JFrame
        setButtonIcons();
        // Disable the play button as the user has not logged into an account yet.
        btnPlay.setEnabled(false);
        // Load up the ArrayList with all the Players in the save files
        playerList = SaveFiles.loadPlayers();
        // Make sure the user cannot resize the window
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBlackjack = new javax.swing.JLabel();
        btnPlay = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        btnCredits = new javax.swing.JButton();
        btnSignUp = new javax.swing.JButton();
        btnLogIn = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        lblTokens = new javax.swing.JLabel();
        lblSignedIn = new javax.swing.JLabel();
        btnLeaderboard = new javax.swing.JButton();
        btnBailout = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(960, 570));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblBlackjack.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lblBlackjack.setForeground(new java.awt.Color(255, 255, 255));
        lblBlackjack.setText("Sam and Hugh's Blackjack!");
        getContentPane().add(lblBlackjack, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 440, 25));

        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        getContentPane().add(btnPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 190, 120, 60));

        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });
        getContentPane().add(btnQuit, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 280, 120, 60));

        btnCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditsActionPerformed(evt);
            }
        });
        getContentPane().add(btnCredits, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 370, 120, 60));

        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });
        getContentPane().add(btnSignUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 90, 50));

        btnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogInActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 70, 90, 50));

        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 130, 90, 50));

        lblTokens.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lblTokens.setForeground(new java.awt.Color(255, 255, 255));
        lblTokens.setText("Tokens: ");
        getContentPane().add(lblTokens, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        lblSignedIn.setFont(new java.awt.Font("OCR A Extended", 1, 18)); // NOI18N
        lblSignedIn.setForeground(new java.awt.Color(255, 255, 255));
        lblSignedIn.setText("Signed in as:");
        getContentPane().add(lblSignedIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, -1, -1));

        btnLeaderboard.setActionCommand("");
        btnLeaderboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaderboardActionPerformed(evt);
            }
        });
        getContentPane().add(btnLeaderboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, 90, 50));

        btnBailout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBailoutActionPerformed(evt);
            }
        });
        getContentPane().add(btnBailout, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 380, 90, 50));
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditsActionPerformed
        // If the user presses the credits button, we switch over to the credits window
        if (creditsWindow == null) {
            creditsWindow = new CreditsWindow(this);
        }
        // We set the credits window to be visible and the current window to be invisible
        creditsWindow.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnCreditsActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        // If the user decides to quit, display a goodbye message and exit the program
        JOptionPane.showMessageDialog(null, "See ya later!", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
        // If there is a signed in player, save it to the object so they can't cheat
        if(signedInPlayer != null){
        SaveFiles.saveObjectNoSelection(signedInPlayer);
        }
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // If the user presses the play button, it means they are signed in,
        // so we invoke the playGame method with the current signed in player
        playGame(signedInPlayer);
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        // If the user decides to press the sign up button, invoke the sign up method    
        signUp();   
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void btnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogInActionPerformed
        // If the user decides to press the log in button, invoke the log in method    
        logIn();
    }//GEN-LAST:event_btnLogInActionPerformed

    /**
     * The sign up method, used if the user presses the sign up button to 
     * make an account for Blackjack
     */
    public void signUp(){
        // Ask the user for their username
        String username = "" + JOptionPane.showInputDialog(null, "What is your username?", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon, null, "");
            // If the username is already taken, display an error message and ask the user to try again
            if (playerList.contains(getPlayer(username))) {
                JOptionPane.showMessageDialog(null, "Username already taken, try again.","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            } else if (username.strip().equals("")){
                JOptionPane.showMessageDialog(null, "Empty Username, try again.","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            } else {
                // If the username isn't taken, prompt the user for a password
                String password = "" + JOptionPane.showInputDialog(null, "Choose a password", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon, null, "");
                // Create a new Player object with the given username and password
                Player newPlayer = new Player(username, password);
                // Add the new player to the ArrayList full of Players
                playerList.add(newPlayer);
                // Make the signed in player the new player object
                signedInPlayer = newPlayer;
                // Edit the text to display the current signed in player's name and tokens
                lblSignedIn.setText("Signed in as:" + signedInPlayer.getName());
                lblTokens.setText("Tokens:" + signedInPlayer.getTokens());
                // Because the user is signed in, let the user play the game
                btnPlay.setEnabled(true);
                // Add the new player objects to the sign 
                SaveFiles.saveObjectNoSelection(newPlayer);
            }
    }
    
    /**
     * The log in method, used if the user presses the log in button to
     * sign into an account for Blackjack
     */
    public void logIn(){
        // Ask the user for their username
        String username = "" + JOptionPane.showInputDialog(null, "What is your username?", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon, null, "");
            // If the player is found, ask the user for their password and get the 
            // existing player from the data files to use under the name tempPlayer
            if (playerList.contains(getPlayer(username))) {
                Player tempPlayer = getPlayer(username);
                String password = "" + JOptionPane.showInputDialog(null, "What is your password?", "Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon, null, "");
                // If the password is equal to the pre-existing password
                if (password.equals(tempPlayer.getPassword())) {
                    // Make the signed in Player equal to the the entered player
                    signedInPlayer = getPlayer(username);
                 
                    // Update the text on the GUI to state the signed in players name and their tokens
                    lblSignedIn.setText("Signed in as:" + signedInPlayer.getName());
                    lblTokens.setText("Tokens:" + signedInPlayer.getTokens());
                    // Check if the user has any tokens, if they do, let them play
                    if (!(signedInPlayer.getTokens() <= 0)){
                        btnPlay.setEnabled(true);
                    }
                // If the inputted password does not match the password on record, 
                // Output an error message
                } else {
                    JOptionPane.showMessageDialog(null, "Wrong password!","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
                }
            // If the player name isn't found on the save files, output an error message
            } else {
                JOptionPane.showMessageDialog(null, "User not found!","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            }
    }

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // If the user decides to log out, don't allow the user to play because they don't have an account
       btnPlay.setEnabled(false);
       // Set the signedInPlayer to null so that they have to sign in to play
       signedInPlayer = null;
       // Reset the text on the GUI to their default values
       lblSignedIn.setText("Signed in as: ");
       lblTokens.setText("Tokens:");
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnLeaderboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaderboardActionPerformed

        quickSort(playerList, 0, playerList.size() - 1);

        String output = "";

        int iterations = 10;
        if (playerList.size() < 10) {
            iterations = playerList.size();
        }

        for (int i = 0; i < iterations; i++) {
            output += i + 1 + ". " + playerList.get(i).getName() + " - " + playerList.get(i).getTokens() + "\n";
        }
        JOptionPane.showMessageDialog(null, output,"Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
    }//GEN-LAST:event_btnLeaderboardActionPerformed

    private void btnBailoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBailoutActionPerformed
         if(signedInPlayer != null && signedInPlayer.getTokens() == 0){
            signedInPlayer.setTokens(signedInPlayer.getTokens() + 100);
            JOptionPane.showMessageDialog(null, "Deposited 100 tokens into your account.","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
            lblTokens.setText("Tokens:"+signedInPlayer.getTokens());
            btnPlay.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(null, "You do not meet the requirements for a bailout.","Sam and Hugh's Blackjack", JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }//GEN-LAST:event_btnBailoutActionPerformed

    /**
     * The playGame method, used if the user decides to play the game
     * after they have signed into their account or made a new account
     * 
     * @param p - the signed in player
     */
    public void playGame(Player p){
        // Switch the windows and invoke the primary construnctor in the main window
        otherWindow = new MainWindow(this, p);
        otherWindow.setVisible(true);
        this.setVisible(false);
       
    }

    /**
     * The getPlayer method, takes a string of a player's name and searches for 
     * it among the save files and returns the object with the player's name
     * 
     * @param s - the name of the player
     * @return - the object of the player with the corrosponding name
     */
    public Player getPlayer(String s) {
        // This will loop through the eintre playerList ArrayList searching for 
        // a player object with the same name as the given name, if it finds the
        // name, it will return the playerObject, if not, it will return null
        for (int i = 0; i < playerList.size(); i++) {
            if (playerList.get(i).getName().equals(s)) {
                return playerList.get(i);
            }
        }
        return null;
    }

    public static void quickSort(ArrayList<Player> a, int left, int right) {
        if (left >= right) {
            return;
        }
        int i = left;
        int j = right;

        int pivot = a.get((left + right) / 2).getTokens();

        while (i < j) {

            while (a.get(i).getTokens() > pivot) {
                i++;
            }

            while (pivot > a.get(j).getTokens()) {
                j--;
            }

            if (i <= j) {
                //Swap values of left and right
                Player temp = a.get(i);
                a.set(i, a.get(j));
                a.set(j, temp);

                i++;
                j--;
            }

        }
        quickSort(a, left, j);
        quickSort(a, i, right);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FirstWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FirstWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FirstWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FirstWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        int[] array = new int[10];
        for (int i = 0; i < 10; i++){
            array[i] = 5;
            System.out.println(array[i]);
        }
        
        /* Create and display the form */
        MainWindow.playSound("theme", true);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FirstWindow().setVisible(true);
            }
        });
    }

    /**
     * The setButtonIcons method, used initially to set all the custom icons for buttons and 
     * the background to their spots on the GUI
     */
    public void setButtonIcons() {
        // Create all the imageIcon's from the images folder 
        ImageIcon bg = new ImageIcon("src/duffytuckwellfinalproject/images/Backgrounds/CasinoBackground.png");
        ImageIcon play = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Play.png");
        ImageIcon credits = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Credits.png");
        ImageIcon quit = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Quit.png");
        ImageIcon signUp = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/SignUp.png");
        ImageIcon logIn = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/LogIn.png");
        ImageIcon logOut = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/LogOut.png");
        ImageIcon tokenLeaderboard = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/TokenLeaderboard.png");
        ImageIcon bailout = new ImageIcon("src/duffytuckwellfinalproject/images/Buttons/Bailout.png");
        // Resize all the image icons to their new sizes
        ImageIcon resizedBg = new ImageIcon(bg.getImage().getScaledInstance(960, 540, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedPlay = new ImageIcon(play.getImage().getScaledInstance(120, 60, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedCredits = new ImageIcon(credits.getImage().getScaledInstance(120, 60, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedQuit = new ImageIcon(quit.getImage().getScaledInstance(120, 60, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedSignUp = new ImageIcon(signUp.getImage().getScaledInstance(90, 45, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedLogIn = new ImageIcon(logIn.getImage().getScaledInstance(90, 45, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedLogOut = new ImageIcon(logOut.getImage().getScaledInstance(90, 45, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedLeaderboard = new ImageIcon(tokenLeaderboard.getImage().getScaledInstance(90, 45, java.awt.Image.SCALE_SMOOTH));
        ImageIcon resizedBailout = new ImageIcon(bailout.getImage().getScaledInstance(90, 45, java.awt.Image.SCALE_SMOOTH));
        
        // Assign all the resized image icons to their respective slots 
        lblBackground.setIcon(resizedBg);
        btnPlay.setIcon(resizedPlay);
        btnCredits.setIcon(resizedCredits);
        btnQuit.setIcon(resizedQuit);
        btnSignUp.setIcon(resizedSignUp);
        btnLogIn.setIcon(resizedLogIn);
        btnLogOut.setIcon(resizedLogOut);
        btnLeaderboard.setIcon(resizedLeaderboard);
        btnBailout.setIcon(resizedBailout);
    }

   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBailout;
    private javax.swing.JButton btnCredits;
    private javax.swing.JButton btnLeaderboard;
    private javax.swing.JButton btnLogIn;
    private javax.swing.JButton btnLogOut;
    public javax.swing.JButton btnPlay;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblBlackjack;
    private javax.swing.JLabel lblSignedIn;
    public javax.swing.JLabel lblTokens;
    // End of variables declaration//GEN-END:variables
}
